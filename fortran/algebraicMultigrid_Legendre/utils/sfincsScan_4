#!/usr/bin/env python

# This script will not work if called directly.
# From the command line, you should call sfincsScan instead.

profilesFilename = 'profiles'

import os, inspect

print "This is "+ inspect.getfile(inspect.currentframe())
print "Beginning a scan over radius."

# Determine radii to use, and n & T at those radii:
skipExistingDirectories = True
execfile(os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))+"/radialScans")

if waitBeforeSubmitting:
    while True:
        proceed=raw_input("Should I go ahead and launch these "+str(len(radii))+" jobs? [y/n] ")
        if proceed=="y" or proceed=="n":
            break
        print "You must enter either y or n."

    if proceed=="n":
        exit(0)

print "launching jobs..."

# Read in the job.sfincsScan file:
with open(jobFilename, 'r') as f:
    jobFile = f.readlines()

for runNum in range(len(radii)):
    directory = directories[runNum]
    print "Beginning to handle job "+str(runNum+1)+" of "+str(len(radii))+": "+directory

    # To be extra safe, check again to see if the directory exists.
    if os.path.exists(directory):
        print "Warning: directory "+directory+" already exists."
        i = -1
        while True:
            i += 1
            directory2 = directory+"_"+str(i)
            if not os.path.exists(directory2):
                break
        directory = directory2
    os.makedirs(directory)
    os.chdir(directory)

    # Copy the job.sfincsScan file:
    thisJobFile = list(jobFile)
    # This next function is defined separately for each system in sfincsScan
    nameJobFile(thisJobFile,directory)
    f = open(jobFilename,"w")
    f.writelines(thisJobFile)
    f.close()

    # Now copy the input.namelist file:

    ##The following section rewritten by AM 2015-12##
    #################################################

    f = open(filename,"w")
    for line in inputFile: ##This loop now just removes the lines which are going to be set later (if they exist in the input file)
        if namelistLineContains(line,radiusName+"_wish"):
##            line = "  "+radiusName+"_wish = "+str(radii[runNum])+" ! Set by sfincsScan_4.\n" ##Commented by AM
            continue ##Added by AM

        if namelistLineContains(line,"nHats"):
##            line = "  nHats =" ##Commented by AM 
##            for ispecies in range(Nspecies): ##Commented by AM 
##                line += " "+str(nHats[ispecies][runNum]) ##Commented by AM 
##            line += " ! Set by sfincsScan_4.\n" ##Commented by AM 
            continue ##Added by AM

        if namelistLineContains(line,"dnHatd"+radiusNameForGradients+"s"):
##            line = "  dnHatd"+radiusNameForGradients+"s =" ##Commented by AM 
##            for ispecies in range(Nspecies): ##Commented by AM 
##                line += " "+str(dnHatdradii[ispecies][runNum]) ##Commented by AM 
##            line += " ! Set by sfincsScan_4.\n" ##Commented by AM 
            continue ##Added by AM

        if namelistLineContains(line,"THats"):
##            line = "  THats =" ##Commented by AM 
##            for ispecies in range(Nspecies): ##Commented by AM 
##                line += " "+str(THats[ispecies][runNum]) ##Commented by AM 
##            line += " ! Set by sfincsScan_4.\n" ##Commented by AM 
            continue ##Added by AM

        if namelistLineContains(line,"dTHatd"+radiusNameForGradients+"s"):
##            line = "  dTHatd"+radiusNameForGradients+"s =" ##Commented by AM 
##            for ispecies in range(Nspecies): ##Commented by AM 
##                line += " "+str(dTHatdradii[ispecies][runNum]) ##Commented by AM 
##            line += " ! Set by sfincsScan_4.\n" ##Commented by AM 
            continue ##Added by AM

#        f.write(line)

        ##Added by AM 2015-12##
#        if namelistLineContains(line,"&geometryParameters") :
        if line.strip().find("&geometryParameters") == 0 :
#            f.write("  "+radiusName+"_wish = "+str(radii[runNum])+" ! Set by sfincsScan_4.\n")
            line += "  "+radiusName+"_wish = "+str(radii[runNum])+" ! Set by sfincsScan_4.\n"

#        if namelistLineContains(line,"&speciesParameters") :
        if line.strip().find("&speciesParameters") == 0 :
            #f.write("  nHats =")
            line += "  nHats ="
            for ispecies in range(Nspecies):
                #f.write(" "+str(nHats[ispecies][runNum]))
                line += " "+str(nHats[ispecies][runNum])
            #f.write(" ! Set by sfincsScan_4.\n")
            line += " ! Set by sfincsScan_4.\n"    

            #f.write("dnHatd"+radiusNameForGradients+"s")
            line += "  dnHatd"+radiusNameForGradients+"s ="
            for ispecies in range(Nspecies):
                #f.write(" "+str(dnHatdradii[ispecies][runNum]))
                line += " "+str(dnHatdradii[ispecies][runNum])
            #f.write(" ! Set by sfincsScan_4.\n")
            line += " ! Set by sfincsScan_4.\n"    

            #f.write("  THats =")
            line += "  THats ="
            for ispecies in range(Nspecies):
                #f.write(" "+str(THats[ispecies][runNum]))
                line += " "+str(THats[ispecies][runNum])
            #f.write(" ! Set by sfincsScan_4.\n")
            line += " ! Set by sfincsScan_4.\n"    

            #f.write("dTHatd"+radiusNameForGradients+"s")
            line += "  dTHatd"+radiusNameForGradients+"s ="
            for ispecies in range(Nspecies):
                #f.write(" "+str(dTHatdradii[ispecies][runNum]))
                line += " "+str(dTHatdradii[ispecies][runNum])
            #f.write(" ! Set by sfincsScan_4.\n")
            line += " ! Set by sfincsScan_4.\n"    

        f.write(line)    
        #######################

    f.close()

    

    #################################################

    # Submit the sfincs job:
    try:
        # We need to include .split(" ") to separate the command-line arguments into an array of strings.   
        # I'm not sure why python requires this. 
        submissionResult = subprocess.call(submitCommand.split(" "))
        #submissionResult=0
    except:
        print "ERROR! Unable to submit run "+directory+" for some reason."
        raise
    else:
        if submissionResult==0:
            print "No errors submitting job "+directory
        else:
            print "Nonzero exit code returned when trying to submit job "+directory

    os.chdir("..")


