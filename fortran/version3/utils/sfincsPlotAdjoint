#!/usr/bin/env python

# This python script plots the output of the gradients computed with the adjoint method and finite differencing.

import matplotlib
import matplotlib.pyplot as plt
import h5py
import numpy as np
import inspect, os
import sys
import matplotlib.ticker as mtick
from scipy.io import netcdf


print "This is "+ inspect.getfile(inspect.currentframe())

try:
    f = h5py.File('sfincsOutput.h5','r')
except:
    print "Unable to open sfincsOutput.h5"
    raise

def percentError(fluxAnalytic,fluxFiniteDiff):
  
  result = np.zeros(fluxAnalytic.shape)
  for iMode in range(0,len(fluxAnalytic)):
    if (abs(fluxFiniteDiff[iMode]) > 1e-12):
      result[iMode] = 100*abs(fluxAnalytic[iMode]-fluxFiniteDiff[iMode])/abs(fluxFiniteDiff[iMode])
    elif (abs(fluxAnalytic[iMode]) < 1e-12):
      result[iMode] = 0
    else:
      result[iMode] = 1e6
  return result

whichLambda = int(sys.argv[1])

matplotlib.rcParams.update({'font.size': 8})

debugAdjoint = f['debugAdjoint'][()]
print "debugAdjoint" + str(debugAdjoint)
if (~debugAdjoint):
  print "This script should only be called if sfincs was run with debugAdjoint = .true."
  exit

ns = f['ns'][()]
ms = f['ms'][()]
dParticleFluxdLambda = f['dParticleFluxdLambda'][()]
dHeatFluxdLambda = f['dHeatFluxdLambda'][()]
dParallelFlowdLambda = f['dParallelFlowdLambda'][()]
# dRadialCurrentdLambda = f['dRadialCurrentdLambda'][()]
# dTotalHeatFluxdLambda = f['dTotalHeatFluxdLambda'][()]
# dBootstrapdLambda = f['dBootstrapdLambda'][()]
# Iteration, lambda, mode
# dRadialCurrentdLambda_finitediff = f['dRadialCurrentdLambda_finitediff'][()]
# dTotalHeatFluxdLambda_finitediff = f['dTotalHeatFluxdLambda_finitediff'][()]
# dBootstrapdLambda_finitediff = f['dBootstrapdLambda_finitediff'][()]
# Iteration, species, lambda, mode
dParticleFluxdLambda_finitediff = f['dParticleFluxdLambda_finitediff'][()]
dHeatFluxdLambda_finitediff = f['dHeatFluxdLambda_finitediff'][()]
dParallelFlowdLambda_finitediff = f['dParallelFlowdLambda_finitediff'][()]

particleFluxPercentError = f['particleFluxPercentError'][()]
heatFluxPercentError = f['heatFluxPercentError'][()]
parallelFlowPercentError = f['parallelFlowPercentError'][()]

bmnc = f['bmnc'][()]
bsupthetamnc = f['bsupthetamnc'][()]
bsupzetamnc = f['bsupzetamnc'][()]
bsubthetamnc = f['bsubthetamnc'][()]
bsubzetamnc = f['bsubzetamnc'][()]
gmnc = f['gmnc'][()]

Nspecies = int(f['Nspecies'][()])
NModesAdjoint = int(f['NModesAdjoint'][()])
NLambda = 6

yticks = mtick.FormatStrFormatter('%.3f%%')

plt.figure(facecolor='white')
plt.scatter(ns,abs(bmnc),c=ms,vmin=min(ms),vmax=max(ms),s=20,edgecolor='black')
plt.yscale('log')
cb = plt.colorbar()
cb.ax.set_title('m')
plt.ylim((min(bmnc),max(bmnc)))
plt.xlabel('n')
plt.ylabel('|bmnc|')

plt.figure(facecolor='white')
plt.scatter(ns,abs(bsupthetamnc),c=ms,vmin=min(ms),vmax=max(ms),s=20,edgecolor='black')
plt.yscale('log')
cb = plt.colorbar()
cb.ax.set_title('m')
plt.ylim((min(bsupthetamnc),max(bsupthetamnc)))
plt.xlabel('n')
plt.ylabel('|bsupthetamnc|')

plt.figure(facecolor='white')
plt.scatter(ns,abs(bsupzetamnc),c=ms,vmin=min(ms),vmax=max(ms),s=20,edgecolor='black')
cb = plt.colorbar()
plt.yscale('log')
cb.ax.set_title('m')
plt.ylim((min(bsupzetamnc),max(bsupzetamnc)))
plt.xlabel('n')
plt.ylabel('|bsupzetamnc|')

plt.figure(facecolor='white')
plt.scatter(ns,abs(bsubthetamnc),c=ms,vmin=min(ms),vmax=max(ms),s=20,edgecolor='black')
cb = plt.colorbar()
plt.yscale('log')
cb.ax.set_title('m')
plt.ylim((min(bsubthetamnc),max(bsubthetamnc)))
plt.xlabel('n')
plt.ylabel('|bsubthetamnc|')

plt.figure(facecolor='white')
plt.scatter(ns,abs(bsubzetamnc),c=ms,vmin=min(ms),vmax=max(ms),s=20,edgecolor='black')
cb = plt.colorbar()
plt.yscale('log')
cb.ax.set_title('m')
plt.ylim((min(bsubzetamnc),max(bsubzetamnc)))
plt.xlabel('n')
plt.ylabel('|bsubzetamnc|')

plt.figure(facecolor='white')
plt.scatter(ns,abs(gmnc),c=ms,vmin=min(ms),vmax=max(ms),s=20,edgecolor='black')
cb = plt.colorbar()
plt.yscale('log')
cb.ax.set_title('m')
plt.ylim((min(gmnc),max(gmnc)))
plt.xlabel('n')
plt.ylabel('|gmnc|')

NspeciesToPlot = Nspecies
if Nspecies>3:
  NspeciesToPlot = 3

#fig = plt.figure(1)
#fig.patch.set_facecolor('white')
#numRows = NspeciesToPlot
#numCols = 4

iteration = 0
# Plot finite diff and analytic derivatives
'''
for ispecies in range(0,NspeciesToPlot):
  fig = plt.figure()
  fig.patch.set_facecolor('white')
  plt.title('Species = ' + str(ispecies+1) + ' Lambda = ' + str(whichLambda))
  #plt.subplot(numRows, numCols, ispecies*numCols+1)
  plt.scatter(ns,dParticleFluxdLambda_finitediff[:,whichLambda-1,ispecies,iteration],label='Finite diff',c=ms,vmin=min(ms),vmax=max(ms),s=20,edgecolors='black')
  plt.scatter(ns,dParticleFluxdLambda[:,whichLambda-1,ispecies,iteration],label='Analytic',c=ms,vmin=min(ms),vmax=max(ms),s=30,marker='x')
  cb = plt.colorbar()
  cb.ax.set_title('m')
  plt.xlabel('n')
  plt.legend()
  plt.ylabel('dParticleFluxdBHat')

  fig = plt.figure()
  fig.patch.set_facecolor('white')
  plt.title('Species = ' + str(ispecies+1) + ' Lambda = ' + str(whichLambda))
  #plt.subplot(numRows, numCols, ispecies*numCols+2)
  plt.scatter(ns,dHeatFluxdLambda_finitediff[:,whichLambda-1,ispecies,iteration],label='Finite diff',c=ms,vmin=min(ms),vmax=max(ms),s=20,edgecolors='black')
  plt.scatter(ns,dHeatFluxdLambda[:,whichLambda-1,ispecies,iteration],label='Analytic',c=ms,vmin=min(ms),vmax=max(ms),s=30,marker='x')
  cb = plt.colorbar()
  cb.ax.set_title('m')
  plt.legend()
  plt.xlabel('n')
  plt.ylabel('dHeatFluxdBHat')

#plt.subplot(numRows, numCols, ispecies*numCols+3)
  fig = plt.figure()
  fig.patch.set_facecolor('white')
  plt.title('Species = ' + str(ispecies+1) + ' Lambda = ' + str(whichLambda))
  plt.scatter(ns,dParallelFlowdLambda_finitediff[:,whichLambda-1,ispecies,iteration],label='Finite diff',c=ms,vmin=min(ms),vmax=max(ms),s=20,edgecolors='black')
  plt.scatter(ns,dParallelFlowdLambda[:,whichLambda-1,ispecies,iteration],label='Analytic',c=ms,vmin=min(ms),vmax=max(ms),s=30,marker='x')
  cb = plt.colorbar()
  cb.ax.set_title('m')
  plt.legend()
  plt.xlabel('n')
  plt.ylabel('dParallelFlowdBHat')
'''

# Plot percent error
# fig = plt.figure(2)
# fig.patch.set_facecolor('white')
# numRows = NspeciesToPlot
# numCols = 4
for ispecies in range(0,NspeciesToPlot):
  fig = plt.figure()
  fig.patch.set_facecolor('white')
  plt.title('Species = ' + str(ispecies+1) + ' Lambda = ' + str(whichLambda))
  # percentErrorParticleFlux = percentError(dParticleFluxdLambda[:,whichLambda-1,ispecies,iteration],dParticleFluxdLambda_finitediff[:,whichLambda-1,ispecies,iteration])
  # plt.subplot(numRows, numCols, ispecies*numCols+1)
  plt.scatter(ns,particleFluxPercentError[:,whichLambda-1,ispecies,iteration],c=ms,vmin=min(ms),vmax=max(ms),s=20,edgecolors='black')
  cb = plt.colorbar()
  cb.ax.set_title('m')
  ax = plt.gca()
  ax.yaxis.set_major_formatter(yticks)
  plt.ylim((0,max(particleFluxPercentError[:,whichLambda-1,ispecies,iteration])))
  #ax.set_yscale('log')
  plt.xlabel('n')
  plt.ylabel('dParticleFluxdBHat percent error')
  
  fig = plt.figure()
  fig.patch.set_facecolor('white')
  plt.title('Species = ' + str(ispecies+1) + ' Lambda = ' + str(whichLambda))
  percentErrorHeatFlux = percentError(dHeatFluxdLambda[:,whichLambda-1,ispecies,iteration],dHeatFluxdLambda_finitediff[:,whichLambda-1,ispecies,iteration])
  #plt.subplot(numRows, numCols, ispecies*numCols+2)
  plt.scatter(ns,heatFluxPercentError[:,whichLambda-1,ispecies,iteration],c=ms,vmin=min(ms),vmax=max(ms),s=20,edgecolors='black')
  cb = plt.colorbar()
  cb.ax.set_title('m')
  ax = plt.gca()
  ax.yaxis.set_major_formatter(yticks)
  plt.ylim((0,max(heatFluxPercentError[:,whichLambda-1,ispecies,iteration])))
  #ax.set_yscale('log')
  plt.xlabel('n')
  plt.ylabel('dHeatFluxdBHat percent error')

  fig = plt.figure()
  fig.patch.set_facecolor('white')
  plt.title('Species = ' + str(ispecies+1) + ' Lambda = ' + str(whichLambda))
  percentErrorParallelFlow = percentError(dParallelFlowdLambda[:,whichLambda-1,ispecies,iteration],dParallelFlowdLambda_finitediff[:,whichLambda-1,ispecies,iteration])
  #plt.subplot(numRows, numCols, ispecies*numCols+3)
  plt.scatter(ns,parallelFlowPercentError[:,whichLambda-1,ispecies,iteration],c=ms,vmin=min(ms),vmax=max(ms),s=20,edgecolors='black')
  plt.ylim((0,max(parallelFlowPercentError[:,whichLambda-1,ispecies,iteration])))
  cb = plt.colorbar()
  cb.ax.set_title('m')
  ax = plt.gca()
  ax.yaxis.set_major_formatter(yticks)
  #ax.set_yscale('log')
  plt.xlabel('n')
  plt.ylabel('dParallelFlowdBHat percent error')

  print "iSpecies: " + str(ispecies)
  print "whichLambda: " + str(whichLambda)
  print "parallelFlow percent error: " + str(parallelFlowPercentError[:,whichLambda-1,ispecies,iteration])
  print "parallelFlow finite diff: " + str(dParallelFlowdLambda_finitediff[:,whichLambda-1,ispecies,iteration])
  print "parallelFlow analytic: " + str(dParallelFlowdLambda[:,whichLambda-1,ispecies,iteration])
  print "heatFlux percent error: " + str(heatFluxPercentError[:,whichLambda-1,ispecies,iteration])
  print "heatFlux finite diff: " + str(dHeatFluxdLambda_finitediff[:,whichLambda-1,ispecies,iteration])
  print "heatFlux analytic: " + str(dHeatFluxdLambda[:,whichLambda-1,ispecies,iteration])
  print "particleFlux percent error: " + str(particleFluxPercentError[:,whichLambda-1,ispecies,iteration])
  print "particleFlux finite diff: " + str(dParticleFluxdLambda_finitediff[:,whichLambda-1,ispecies,iteration])
  print "particleFlux: " + str(dParticleFluxdLambda[:,whichLambda-1,ispecies,iteration])
  print "ms: " + str(ms)
  print "ns: " + str(ns)

print "bmnc: " + str(bmnc)
print "bsupthetamnc: " + str(bsupthetamnc)
print "bsupzetamnc: " + str(bsupzetamnc)
print "bsubthetamnc: " + str(bsubthetamnc)
print "bsubzetamnc: " + str(bsubzetamnc)
print "gmnc: " + str(gmnc)
                                             

'''
  print "iSpecies" + str(ispecies)
  print "whichLambda" + str(whichLambda)
  for iMode in range(0, NModesAdjoint):
    if percentErrorParticleFlux[iMode] > 10:
      print "m = " + str(ms[iMode])
      print "n = " + str(ns[iMode])
      print "percentErrorParticleFlux[iMode]: " + str(percentErrorParticleFlux[iMode])
      print "analytic: " + str(dParticleFluxdLambda[iMode,whichLambda-1,ispecies,iteration])
      print "finite diff: " + str(dParticleFluxdLambda_finitediff[iMode,whichLambda-1,ispecies,iteration])
    if percentErrorHeatFlux[iMode] > 10:
      print "m = " + str(ms[iMode])
      print "n = " + str(ns[iMode])
      print "percentErrorHeatFlux[iMode]: " + str(percentErrorHeatFlux[iMode])
      print "analytic: " + str(dHeatFluxdLambda[iMode,whichLambda-1,ispecies,iteration])
      print "finite diff: " + str(dHeatFluxdLambda_finitediff[iMode,whichLambda-1,ispecies,iteration])
    if percentErrorParallelFlow[iMode] > 10:
      print "m = " + str(ms[iMode])
      print "n = " + str(ns[iMode])
      print "percentErrorParallelFlow[iMode]: " + str(percentErrorParallelFlow[iMode])
      print "analytic: " + str(dParallelFlowdLambda[iMode,whichLambda-1,ispecies,iteration])
      print "finite diff: " + str(dParallelFlowdLambda_finitediff[iMode,whichLambda-1,ispecies,iteration])
      '''

plt.tight_layout()
plt.show()


